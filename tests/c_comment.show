STATE 1 default: normal
  rule (comment) "///" (exit level: 0, next: 2)
    STATE 2 default: comment
      rule (comment) "\z" (exit level: 1, next: 0)
      rule (url) "(?:(?:<?)[[:word:]\./\-_~]+\@[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (url) "(?:(?:<?)[[:word:]]+://[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (preproc) "<\?xml" (exit level: 0, next: 3)
        STATE 3 default: normal
          rule (preproc) "\?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 4)
            STATE 4 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (preproc) "<!DOCTYPE" (exit level: 0, next: 5)
        STATE 5 default: normal
          rule (preproc) ">" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 6)
            STATE 6 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (comment) "<!--" (exit level: 0, next: 7)
        STATE 7 default: comment
          rule (comment) "-->" (exit level: 1, next: 0)
          rule (comment) "<!--" (exit level: 0, next: 0, nested)
      rule (keyword) "(?:<(?:/)?[[:alpha:]](?:[[:word:]:.-]*)(?:/)?>)" (exit level: 0, next: 0)
      rule (keyword) "<(?:/)?[[:alpha:]](?:[[:word:]:.-]*)" (exit level: 0, next: 8)
        STATE 8 default: normal
          rule (keyword) "(?:/)?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 9)
            STATE 9 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (preproc) "(?:&(?:[[:alnum:]]+);)" (exit level: 0, next: 0)
      rule (keyword) "(?:<(?:/)?[[:alpha:]][[:alnum:]]*(?:/)?>)" (exit level: 0, next: 0)
      rule (keyword) "<(?:/)?[[:alpha:]][[:alnum:]]*" (exit level: 0, next: 10)
        STATE 10 default: normal
          rule (keyword) "(?:/)?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 11)
            STATE 11 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (type) "(?:\@[[:alpha:]]+)" (exit level: 0, next: 0)
      rule (todo) "(?:(?:TODO|FIXME|BUG)(?:[:]?))" (exit level: 0, next: 0)
  rule (comment) "//" (exit level: 0, next: 12)
    STATE 12 default: comment
      rule (comment) "\z" (exit level: 1, next: 0)
  rule (comment) "/\*\*" (exit level: 0, next: 13)
    STATE 13 default: comment
      rule (comment) "\*/" (exit level: 1, next: 0)
      rule (url) "(?:(?:<?)[[:word:]\./\-_~]+\@[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (url) "(?:(?:<?)[[:word:]]+://[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (preproc) "<\?xml" (exit level: 0, next: 14)
        STATE 14 default: normal
          rule (preproc) "\?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 15)
            STATE 15 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (preproc) "<!DOCTYPE" (exit level: 0, next: 16)
        STATE 16 default: normal
          rule (preproc) ">" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 17)
            STATE 17 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (comment) "<!--" (exit level: 0, next: 18)
        STATE 18 default: comment
          rule (comment) "-->" (exit level: 1, next: 0)
          rule (comment) "<!--" (exit level: 0, next: 0, nested)
      rule (keyword) "(?:<(?:/)?[[:alpha:]](?:[[:word:]:.-]*)(?:/)?>)" (exit level: 0, next: 0)
      rule (keyword) "<(?:/)?[[:alpha:]](?:[[:word:]:.-]*)" (exit level: 0, next: 19)
        STATE 19 default: normal
          rule (keyword) "(?:/)?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 20)
            STATE 20 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (preproc) "(?:&(?:[[:alnum:]]+);)" (exit level: 0, next: 0)
      rule (keyword) "(?:<(?:/)?[[:alpha:]][[:alnum:]]*(?:/)?>)" (exit level: 0, next: 0)
      rule (keyword) "<(?:/)?[[:alpha:]][[:alnum:]]*" (exit level: 0, next: 21)
        STATE 21 default: normal
          rule (keyword) "(?:/)?>" (exit level: 1, next: 0)
          rule (type normal symbol) "([^="[:blank:]>]+)([[:blank:]]*)(=?)" (exit level: 0, next: 0)
          rule (string) "\"" (exit level: 0, next: 22)
            STATE 22 default: string
              rule (string) "\"" (exit level: 1, next: 0)
              rule (string) "\\." (exit level: 0, next: 0)
      rule (type) "(?:\@[[:alpha:]]+)" (exit level: 0, next: 0)
      rule (todo) "(?:(?:TODO|FIXME|BUG)(?:[:]?))" (exit level: 0, next: 0)
  rule (comment) "/\*" (exit level: 0, next: 23)
    STATE 23 default: comment
      rule (comment) "\*/" (exit level: 1, next: 0)
      rule (url) "(?:(?:<?)[[:word:]\./\-_~]+\@[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (url) "(?:(?:<?)[[:word:]]+://[[:word:]\./\-_~]+(?:>?))" (exit level: 0, next: 0)
      rule (todo) "(?:(?:TODO|FIXME|BUG)(?:[:]?))" (exit level: 0, next: 0)
